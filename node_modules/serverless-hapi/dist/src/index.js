"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var Provider;
(function (Provider) {
    Provider[Provider["AWS"] = 0] = "AWS";
    Provider[Provider["AZURE"] = 1] = "AZURE";
    Provider[Provider["GCP"] = 2] = "GCP";
})(Provider || (Provider = {}));
function buildQueryString(queryStrings) {
    return Object.keys(queryStrings)
        .map(function (key) { return key + "=" + queryStrings[key]; })
        .join('&');
}
function getUrl(event) {
    var azEvent = event;
    return (event.path || (azEvent.req && (azEvent.req.url || azEvent.req.originalUrl)));
}
function buildFullUrl(event, queryStrings) {
    var url = getUrl(event);
    return !!queryStrings ? url + "?" + buildQueryString(queryStrings) : url;
}
function setupAws(_a) {
    var event = _a.event, server = _a.server, onInitError = _a.onInitError, userOptions = _a.userOptions;
    var queryStrings = event.queryStringParameters;
    var serverOptions = {
        method: event.httpMethod,
        url: buildFullUrl(event, queryStrings),
        headers: event.headers,
        payload: event.body !== null && event.body,
    };
    return setupServer({ server: server, onInitError: onInitError, userOptions: userOptions, serverOptions: serverOptions });
}
function setupAzure(_a) {
    var event = _a.event, server = _a.server, onInitError = _a.onInitError, userOptions = _a.userOptions;
    return __awaiter(this, void 0, void 0, function () {
        var queryStrings, serverOptions;
        return __generator(this, function (_b) {
            queryStrings = event.query;
            serverOptions = {
                url: buildFullUrl(event, queryStrings),
                method: event.req && event.req.method,
                headers: event.req && event.req.headers,
                payload: event.req && event.req.body,
            };
            return [2 /*return*/, setupServer({
                    server: server,
                    onInitError: onInitError,
                    userOptions: userOptions,
                    serverOptions: serverOptions,
                }).then(function (serverData) { return ({ res: serverData }); })];
        });
    });
}
function setupServer(_a) {
    var _this = this;
    var server = _a.server, onInitError = _a.onInitError, userOptions = _a.userOptions, serverOptions = _a.serverOptions;
    return server
        .initialize()
        .then(function () { return __awaiter(_this, void 0, void 0, function () {
        var _a, hapiResponse, statusCode, body, getHeaders, headers, cookieHeader, setCookieHeader, data;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, server.inject(serverOptions)];
                case 1:
                    hapiResponse = _b.sent();
                    statusCode = hapiResponse.statusCode;
                    body = hapiResponse.result;
                    getHeaders = function () {
                        var _a = hapiResponse.headers, _ = _a["content-encoding"], __ = _a["transfer-encoding"], headers = __rest(_a, ['content-encoding', 'transfer-encoding']);
                        return userOptions.filterHeaders ? headers : hapiResponse.headers;
                    };
                    headers = getHeaders();
                    cookieHeader = headers['set-cookie'];
                    setCookieHeader = Array.isArray(cookieHeader)
                        ? cookieHeader[0]
                        : cookieHeader;
                    data = {
                        statusCode: statusCode,
                        body: userOptions.stringifyBody
                            ? typeof body === 'string'
                                ? body
                                : JSON.stringify(body)
                            : body,
                        headers: !!setCookieHeader
                            ? __assign({}, headers, (_a = {}, _a['set-cookie'] = setCookieHeader, _a)) : headers,
                    };
                    return [2 /*return*/, data];
            }
        });
    }); })
        .catch(function (error) {
        onInitError(error);
        return error;
    });
}
function getProvider(event) {
    return !!event.done ? Provider.AZURE : Provider.AWS;
}
function serverlessHapi(server, 
// Function to be called when `server.initialize` fails.
// According to the hapi documentation we should abort as soon as this
// function is called and contains an error. This is because the server
// is considered to be in an undefined state. It is recommended to assert
// that no error has been returned. Read more at hapi's documentation:
// https://github.com/hapijs/hapi/blob/v16/API.md#serverinitializecallback
onInitError, userOptions) {
    if (userOptions === void 0) { userOptions = { filterHeaders: true, stringifyBody: true }; }
    return function (event, _context) {
        var provider = getProvider(event);
        var serverSettings = { event: event, server: server, onInitError: onInitError, userOptions: userOptions };
        switch (provider) {
            case Provider.AWS:
                return setupAws(serverSettings);
            case Provider.AZURE:
                return setupAzure(serverSettings);
            default:
                throw new Error('Provider not supported!');
        }
    };
}
exports.serverlessHapi = serverlessHapi;
